{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {

      "tags": {
        "type": "object",
        "defaultvalue": {
          "environment": "dev",
          "project": "Atenea"
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]"
      },
      "environment": {
        "type": "string",
        "allowedValues": ["dev", "uat", "pro"],
        "defaultValue": "dev"
      },
      "keyVaultConfig": {
        "type": "object",
        "metadata": {
          "description": "Key Vault configuration object."
        }
      }
  
    },
    "functions": [],
    "variables": {
      "akvName": "[concat(parameters('environment'), '-', parameters('keyVaultConfig').keyVaultName)]"
    },
    "resources": [
      {
        "condition": "[parameters('keyVaultConfig').deployKeyVault]",
        "type": "Microsoft.KeyVault/vaults",
        "apiVersion": "2021-10-01",
        "name": "[variables('akvName')]",
        "location": "[parameters('location')]",
        "tags": "[parameters('tags')]",
        "properties": {
          "sku": {
            "family": "A",
            "name": "[parameters('keyVaultConfig').KeyVaultSkuName]"
          },
          "enabledForDeployment": "[parameters('keyVaultConfig').enabledForDeployment]",
          "enabledForDiskEncryption": "[parameters('keyVaultConfig').enabledForDiskEncryption]",
          "enabledForTemplateDeployment": "[parameters('keyVaultConfig').enabledForTemplateDeployment]",
          "publicNetworkAccess": "[parameters('keyVaultConfig').keyVaultPublicNetworkAccess]",
          "softDeleteRetentionInDays": "[parameters('keyVaultConfig').softDeleteRetentionInDays]",
          "enableRbacAuthorization": "[parameters('keyVaultConfig').enableRbacAuthorization]",
          "tenantId": "[subscription().tenantId]",
          "networkAcls": {
            "defaultAction": "Allow", // Deny
            "bypass": "AzureServices"
          }
        },
        "dependsOn": []
      }
    ],
    "outputs": {
      "keyVaultId": {
        "type": "string",
        "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultConfig').keyVaultName)]"
      }
    }
  }
  
  